"use strict";(self.webpackChunkdoc_saurus_example=self.webpackChunkdoc_saurus_example||[]).push([[620],{7145:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=o(4848),t=o(8453),s=o(2722);const r={sidebar_position:4,title:"Orchestration & Monitoring"},a=void 0,c={id:"xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/index",title:"Orchestration & Monitoring",description:"Orchestration and Monitoring services are vital for managing complex ecosystems, ensuring seamless and compliant operations. The distinction lies in their focus and functionality: ORCE (Orchestration Engine) is tailored for orchestrating tasks, particularly emphasizing complex application networking, while ORC (Orchestration) is specifically designed for managing the life cycle of infrastructure services, including deployment, updates, and deletion based on actions from consumers or providers. Additionally, the Continuous Automated Monitoring (CAM) service ensures transparency through automated compliance monitoring, providing insights into service adherence to Federation rules.",source:"@site/docs/xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/index.mdx",sourceDirName:"xfsc-toolbox/xfsc-foss-components/orchestration-monitoring",slug:"/xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/",permalink:"/landingpage/xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Orchestration & Monitoring"},sidebar:"servicesSidebar",previous:{title:"Data Contract Services (DCS)",permalink:"/landingpage/xfsc-toolbox/xfsc-foss-components/decentralized-catalogue/data-contract"},next:{title:"Orchestration Engine (ORCE)",permalink:"/landingpage/xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/orchestration-engine"}},l={},d=[{value:"Orchestration Engine (ORCE)",id:"orchestration-engine-orce",level:3},{value:"Service Mesh Automation (Orchestration, ORC)",id:"service-mesh-automation-orchestration-orc",level:3},{value:"Continuous Automated Monitoring (CAM)",id:"continuous-automated-monitoring-cam",level:3}];function m(e){const n={h3:"h3",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Orchestration and Monitoring services are vital for managing complex ecosystems, ensuring seamless and compliant operations. The distinction lies in their focus and functionality: ORCE (Orchestration Engine) is tailored for orchestrating tasks, particularly emphasizing complex application networking, while ORC (Orchestration) is specifically designed for managing the life cycle of infrastructure services, including deployment, updates, and deletion based on actions from consumers or providers. Additionally, the Continuous Automated Monitoring (CAM) service ensures transparency through automated compliance monitoring, providing insights into service adherence to Federation rules."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Orchestration Engine (ORCE)"}),"\n",(0,i.jsx)(n.li,{children:"Service Mesh Automation (Orchestration, ORC)"}),"\n",(0,i.jsx)(n.li,{children:"Continuous Automated Monitoring (CAM)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"orchestration-engine-orce",children:"Orchestration Engine (ORCE)"}),"\n",(0,i.jsx)(n.p,{children:"ORCE is a software tool essential for sequentially managing and executing tasks, ensuring a seamless flow of data within the ecosystem. Its primary role is to connect complex services and aplications, promoting smooth communication and interaction. The Workflow Engine enhances complex application networking, focusing on tasks like implementing Onboarding & Accreditation workflows for federations. Additionally, it includes features for sample service orchestration, provisioning, and compliance monitoring based on EUCS metrics."}),"\n",(0,i.jsx)(n.h3,{id:"service-mesh-automation-orchestration-orc",children:"Service Mesh Automation (Orchestration, ORC)"}),"\n",(0,i.jsx)(n.p,{children:'ORC function is to manage services selected or created in the Portal by a Participant. It deploys, updates, and deletes services based on actions from the Consumer or Provider. Providing feedback on service status, the Orchestration is accessible through the Portal or directly by a Participant. It defines an API standard for developing "Life Cycle Management (LCM) Services," specialised components for deploying and managing services across different technologies. The central "LCM Engine" coordinates various LCM Services, interfaces with the Portal, and communicates through the API Standard.'}),"\n",(0,i.jsx)(n.h3,{id:"continuous-automated-monitoring-cam",children:"Continuous Automated Monitoring (CAM)"}),"\n",(0,i.jsx)(n.p,{children:'The "Continuous Automated Monitoring" service provides participants with transparency regarding the compliance status of individual service offerings within the Federated Catalogue. It continuously gathers, evaluates, and visualises compliance-relevant information about services, offering participants insights into the adherence of these offerings to specific requirements and rules set by a Federation.'}),"\n","\n",(0,i.jsxs)("div",{class:"img-container",children:[(0,i.jsx)(s.A,{name:"Orchestration Engine (ORCE)",img:"/landingpage/img/service_3.png",href:"/landingpage/xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/orchestration-engine"}),(0,i.jsx)(s.A,{name:"Service Mesh Automation (Orchestration, ORC)",img:"/landingpage/img/service_3.png",href:"/landingpage/xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/service-mash"}),(0,i.jsx)(s.A,{name:"Continuous Automated Monitoring (CAM)",img:"/landingpage/img/monitoring.png",href:"/landingpage/xfsc-toolbox/xfsc-foss-components/orchestration-monitoring/continuous-automated"})]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},2722:(e,n,o)=>{o.d(n,{A:()=>s});o(6540);const i="boxContainer_Yxjd";var t=o(4848);const s=e=>{let{name:n,img:o,href:s}=e;return(0,t.jsxs)("a",{className:i,href:s,children:[(0,t.jsx)("img",{src:o,alt:n}),(0,t.jsx)("h3",{children:n})]})}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var i=o(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);